// Generated by CoffeeScript 1.6.2
var UA, root,
  __slice = [].slice;

root = typeof exports !== "undefined" && exports !== null ? exports : this;

root["class"] = UA = (function() {
  UA.prototype.page = null;

  UA.prototype.rules = null;

  UA.prototype.state = "init";

  UA.prototype.debug = false;

  UA.prototype.retryTimeout = 100;

  UA.prototype.waitTimeout = 5000;

  function UA() {
    var _this = this;
    this.rules = {};
    this.page = require("webpage").create();
    this.page.onResourceRequested = function(r) {
      if (_this.debug) {
        return console.log("request() " + r.url);
      }
    };
    this.page.onLoadFinished = function(r) {
      return _this.run("page/finish");
    };
    this.tr("init", "page/open", "page/requested", function(uri) {
      var _this = this;
      return this.page.open(uri, function(status) {
        return _this.run("page/open", status);
      });
    });
    this.page.onConsoleMessage = function(msg) {
      if (_this.debug) {
        return console.log("CONSOLE: " + msg);
      }
    };
    this.page.onError = function(msg) {
      return console.log("ERROR: " + msg);
    };
    this.page.viewportSize = {
      width: 1024,
      height: 768
    };
  }

  UA.prototype.tr = function(state, ev, newstate, fn) {
    if (!this.rules[state]) {
      this.rules[state] = {};
    }
    return this.rules[state][ev] = {
      fn: fn,
      newstate: newstate
    };
  };

  UA.prototype.run = function() {
    var args, ev, tr;
    ev = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.log("run() " + this.state + " -> " + ev);
    if (!this.rules[this.state]) {
      return console.log("No rules for state " + this.state);
    }
    if (!this.rules[this.state][ev]) {
      return console.log("No event " + ev + " on state " + this.state);
    }
    tr = this.rules[this.state][ev];
    if (!tr) {
      return;
    }
    this.state = tr.newstate;
    if (tr.fn) {
      return tr.fn.call(this, args);
    }
  };

  UA.prototype.jQuery = function(selector, fn) {
    return this.page.evaluate((function(selector, fn) {
      return fn.call($(selector));
    }), selector, fn);
  };

  UA.prototype.box = function(selector) {
    return this.jQuery(selector, function() {
      return {
        x: this.offset().left,
        y: this.offset().top,
        w: this.width(),
        h: this.height()
      };
    });
  };

  UA.prototype.click = function(selector) {
    var box;
    box = this.box(selector);
    return this.page.sendEvent("click", box.x + box.w / 2, box.y + box.h / 2);
  };

  UA.prototype.click_jq = function(selector) {
    return this.jQuery(selector, function() {
      return this.click();
    });
  };

  UA.prototype.text = function(selector, text) {
    this.click(selector);
    return this.page.sendEvent("keypress", text);
  };

  UA.prototype.exists = function(selector) {
    return this.jQuery(selector, function() {
      return this.length > 0;
    });
  };

  UA.prototype.innerText = function(selector) {
    return this.jQuery(selector, function() {
      return this.text();
    });
  };

  UA.prototype.wait = function(selector, ev, check) {
    var handler, start,
      _this = this;
    if (check == null) {
      check = function(selector) {
        return _this.exists(selector);
      };
    }
    start = new Date().getTime();
    return handler = setInterval((function() {
      var status;
      status = check(selector);
      if (status) {
        clearInterval(handler);
        _this.run(ev);
      }
      if (new Date().getTime() - start > _this.waitTimeout) {
        clearInterval(handler);
        return _this.run("timeout " + ev);
      }
    }), this.retryTimeout);
  };

  return UA;

})();
