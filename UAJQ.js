// Generated by CoffeeScript 1.6.2
var UA, UAJQ, root, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

UA = require("./UA.js")["class"];

root = typeof exports !== "undefined" && exports !== null ? exports : this;

root["class"] = UAJQ = (function(_super) {
  __extends(UAJQ, _super);

  function UAJQ() {
    _ref = UAJQ.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  UAJQ.prototype.jQuery = function(selector, fn) {
    return this.page.evaluate((function(selector, fn) {
      return fn.call($(selector));
    }), selector, fn);
  };

  UAJQ.prototype.box = function(selector) {
    return this.jQuery(selector, function() {
      return {
        x: this.offset().left,
        y: this.offset().top,
        w: this.width(),
        h: this.height()
      };
    });
  };

  UAJQ.prototype.click = function(selector) {
    var box;
    box = this.box(selector);
    return this.page.sendEvent("click", box.x + box.w / 2, box.y + box.h / 2);
  };

  UAJQ.prototype.click_jq = function(selector) {
    return this.jQuery(selector, function() {
      return this.click();
    });
  };

  UAJQ.prototype.text = function(selector, text) {
    this.click(selector);
    return this.page.sendEvent("keypress", text);
  };

  UAJQ.prototype.exists = function(selector) {
    return this.jQuery(selector, function() {
      return this.length > 0;
    });
  };

  UAJQ.prototype.innerText = function(selector) {
    return this.jQuery(selector, function() {
      return this.text();
    });
  };

  UAJQ.prototype.wait = function(selector, check) {
    var handler, start,
      _this = this;
    if (check == null) {
      check = function(selector) {
        return _this.exists(selector);
      };
    }
    start = new Date().getTime();
    return handler = setInterval((function() {
      var status;
      status = check(selector);
      if (status) {
        clearInterval(handler);
        _this.nextStep();
      }
      if (new Date().getTime() - start > _this.waitTimeout) {
        clearInterval(handler);
        return _this.onTimeout();
      }
    }), this.retryTimeout);
  };

  return UAJQ;

})(UA);
